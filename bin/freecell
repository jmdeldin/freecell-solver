#! /usr/bin/env ruby
#
# Solve a given FreeCell game.
#

$LOAD_PATH << File.expand_path(File.join(File.dirname(__FILE__), "../lib"))
require 'free_cell'

abort "Usage: #{File.basename(__FILE__)} INPUT-FILE" unless ARGV.first

r    = FreeCell::Reader.new(File.open(ARGV.shift))
goal = FreeCell::State.generate_goal_state({ :num_cards => r.num_cards,
                                             :num_suits => r.num_suits,
                                             :num_free_cells => r.num_free,
                                           })

puts "Goal:"
puts "free cells  = #{goal.free_cells.map{|x| '_' }}"
puts "foundations = #{goal.foundations.inspect}"
puts

state = FreeCell::State.new(r.columns, {}, Array.new(r.num_free))
goal.foundations.keys.each { |k| state.foundations[k] = [] }

problem = FreeCell::Problem.new(state, goal)

# override the algorithm
algo = ARGV.any?? ARGV.shift : r.algorithm.to_s
klass = algo.capitalize + 'Solver'

solver = if klass == "AstarSolver" then
           FreeCell::AstarSolver.new(problem)
         else
           FreeCell::const_get(klass).new(problem)
         end

# override the verbosity -- steps, descriptions, show_boards
verbosity = ARGV.any?? ARGV.shift.to_sym : r.verbosity

if solver.solution
  puts "Solution found!"
  np = FreeCell::NodePrinter.new(solver.solution)
  puts np.send(verbosity)
else
  abort "No solution found!"
end
